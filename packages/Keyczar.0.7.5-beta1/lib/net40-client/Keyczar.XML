<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Keyczar</name>
    </assembly>
    <members>
        <member name="T:Keyczar.Compat.Export">
            <summary>
            Methods for exporting a keyset to a third party format
            </summary>
        </member>
        <member name="M:Keyczar.Compat.Export.ExportPrimaryAsPkcs(Keyczar.IKeySet,System.String,System.Func{System.String})">
            <summary>
            Exports the primary key as PKCS.
            </summary>
            <param name="keySet">The keyset.</param>
            <param name="location">The location.</param>
            <param name="passwordPrompt">The password prompt.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidKeyTypeException">Needs to be a private key.</exception>
            <exception cref="T:Keyczar.InvalidKeyTypeException">Non exportable key type.</exception>
        </member>
        <member name="T:Keyczar.Compat.VanillaSigner">
            <summary>
            Plain old signing with plain old signature
            </summary>
        </member>
        <member name="T:Keyczar.Signer">
            <summary>
            Signs data using a given keyset
            </summary>
        </member>
        <member name="T:Keyczar.Verifier">
            <summary>
            Verifies signed data using a given key set.
            </summary>
        </member>
        <member name="T:Keyczar.Keyczar">
            <summary>
            Base class for standard crypt/sign API
            </summary>
        </member>
        <member name="F:Keyczar.Keyczar.KeyHashLength">
            <summary>
            Key hash length
            </summary>
        </member>
        <member name="F:Keyczar.Keyczar.FormatVersion">
            <summary>
            Keyczar format version
            </summary>
        </member>
        <member name="F:Keyczar.Keyczar.FormatBytes">
            <summary>
            Keyczar format version bytes for header
            </summary>
        </member>
        <member name="F:Keyczar.Keyczar.HeaderLength">
            <summary>
            Full keyczar format header length
            </summary>
        </member>
        <member name="F:Keyczar.Keyczar.BufferSize">
            <summary>
            Buffer size used throughout
            </summary>
        </member>
        <member name="M:Keyczar.Keyczar.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Keyczar.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.Keyczar"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.Keyczar.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Keyczar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Keyczar"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.Keyczar.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Keyczar"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.Keyczar.GetPrimaryKey">
            <summary>
            Gets the primary key.
            </summary>
            <returns></returns>
            <exception cref="T:System.Data.MissingPrimaryKeyException"></exception>
        </member>
        <member name="M:Keyczar.Keyczar.GetAllKeys">
            <summary>
            Gets all keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Keyczar.GetKey(System.Byte[])">
            <summary>
            Gets the key using a hash.
            </summary>
            <param name="hash">The hash.</param>
            <returns>List of keys that match the hash</returns>
        </member>
        <member name="P:Keyczar.Keyczar.RawStringEncoding">
            <summary>
            Default encoding used through out (UTF8)
            </summary>
        </member>
        <member name="M:Keyczar.Verifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Verifier"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.Verifier.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Verifier"/> class.
            </summary>
            <param name="keySet">The key set.</param>
            <exception cref="T:Keyczar.InvalidKeySetException">This key set can not be used for verifying signatures.</exception>
        </member>
        <member name="M:Keyczar.Verifier.Verify(System.String,Keyczar.WebBase64)">
            <summary>
            Verifies the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Verifier.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Verifier.GetKeys(System.Byte[],System.Byte[]@)">
            <summary>
            Gets the keys.
            </summary>
            <param name="signature">The signature.</param>
            <param name="trimmedSignature">The trimmed sig.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidCryptoDataException">Signature missing header information.</exception>
        </member>
        <member name="M:Keyczar.Verifier.Verify(System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Verifies the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Verifier.PrefixDataVerify(Keyczar.Crypto.Streams.VerifyingStream,System.Object)">
            <summary>
            Prefixes the data before verifying.
            </summary>
            <param name="verifyingStream">The verifying stream.</param>
            <param name="extra">The extra data passed by prefixData</param>
        </member>
        <member name="M:Keyczar.Verifier.PostfixDataVerify(Keyczar.Crypto.Streams.VerifyingStream,System.Object)">
            <summary>
            Postfixes data before verifying.
            </summary>
            <param name="verifyingStream">The verifying stream.</param>
            <param name="extra">The extra data passed by postfixData</param>
        </member>
        <member name="M:Keyczar.Verifier.Verify(System.IO.Stream,System.Byte[],System.Object,System.Object,System.Int64)">
            <summary>
            Verifies the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <param name="prefixData">The prefix data.</param>
            <param name="postfixData">The postfix data.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Signer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Signer"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.Signer.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Signer"/> class.
            </summary>
            <param name="keySet">The key set.</param>
            <exception cref="T:Keyczar.InvalidKeySetException">This key set can not be used for signing and verifying.</exception>
        </member>
        <member name="M:Keyczar.Signer.Sign(System.String)">
            <summary>
            Signs the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Signer.Sign(System.Byte[])">
            <summary>
            Signs the specified raw data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Signer.Sign(System.IO.Stream,System.Int64)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Signer.Sign(System.IO.Stream,System.IO.Stream,System.Object,System.Object,System.Object,System.Int64)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="outstream">The outstream.</param>
            <param name="prefixData">The prefix data.</param>
            <param name="postfixData">The postfix data.</param>
            <param name="signatureData">The sig data.</param>
            <param name="inputLength"> Length of the input.</param>
        </member>
        <member name="M:Keyczar.Signer.PrefixDataSign(Keyczar.Crypto.Streams.HashingStream,System.Object)">
            <summary>
            Prefixes the data then signs it.
            </summary>
            <param name="signingStream">The signing stream.</param>
            <param name="extra">The extra data passed by prefixData.</param>
        </member>
        <member name="M:Keyczar.Signer.PostfixDataSign(Keyczar.Crypto.Streams.HashingStream,System.Object)">
            <summary>
            Postfixes the data then signs it.
            </summary>
            <param name="signingStream">The signing stream.</param>
            <param name="extra">The extra data passed by postfixData.</param>
        </member>
        <member name="M:Keyczar.Signer.PadSignature(System.Byte[],System.IO.Stream,System.Object)">
            <summary>
            Pads the signature with extra data.
            </summary>
            <param name="signature">The signature.</param>
            <param name="outputStream">The padded signature.</param>
            <param name="extra">The extra data passed by sigData.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Compat.VanillaSigner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Compat.VanillaSigner"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaSigner.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Compat.VanillaSigner"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaSigner.PrefixDataSign(Keyczar.Crypto.Streams.HashingStream,System.Object)">
            <summary>
            Prefixes the data then signs it.
            </summary>
            <param name="signingStream">The signing stream.</param>
            <param name="extra">The extra data passed by prefixData.</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaSigner.PostfixDataSign(Keyczar.Crypto.Streams.HashingStream,System.Object)">
            <summary>
            Postfixes the data then signs it.
            </summary>
            <param name="signingStream">The signing stream.</param>
            <param name="extra">The extra data passed by postfixData.</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaSigner.PrefixDataVerify(Keyczar.Crypto.Streams.VerifyingStream,System.Object)">
            <summary>
            Prefixes the data before verifying.
            </summary>
            <param name="verifyingStream">The verifying stream.</param>
            <param name="extra">The extra data passed by prefixData</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaSigner.PostfixDataVerify(Keyczar.Crypto.Streams.VerifyingStream,System.Object)">
            <summary>
            Posts the fix data before verifying.
            </summary>
            <param name="verifyingStream">The verifying stream.</param>
            <param name="extra">The extra data passed by postFixData</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaSigner.PadSignature(System.Byte[],System.IO.Stream,System.Object)">
            <summary>
            Pads the signature with extra data.
            </summary>
            <param name="signature">The signature.</param>
            <param name="outputStream">The padded signature.</param>
            <param name="extra">The extra data passed by sigData.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Compat.VanillaSigner.GetKeys(System.Byte[],System.Byte[]@)">
            <summary>
            Gets the keys.
            </summary>
            <param name="signature">The signature.</param>
            <param name="trimmedSignature">The trimmed sig.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Compat.VanillaVerifier">
            <summary>
            Plain old verification with plain old signature
            </summary>
        </member>
        <member name="M:Keyczar.Compat.VanillaVerifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Compat.VanillaVerifier"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaVerifier.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Compat.VanillaVerifier"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaVerifier.PrefixDataVerify(Keyczar.Crypto.Streams.VerifyingStream,System.Object)">
            <summary>
            Prefixes the data before verifying.
            </summary>
            <param name="verifyingStream">The verifying stream.</param>
            <param name="extra">The extra data passed by prefixData</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaVerifier.PostfixDataVerify(Keyczar.Crypto.Streams.VerifyingStream,System.Object)">
            <summary>
            Posts the fix data before verifying.
            </summary>
            <param name="verifyingStream">The verifying stream.</param>
            <param name="extra">The extra data passed by postFixData</param>
        </member>
        <member name="M:Keyczar.Compat.VanillaVerifier.GetKeys(System.Byte[],System.Byte[]@)">
            <summary>
            Gets the keys.
            </summary>
            <param name="signature">The signature.</param>
            <param name="trimmedSignature">The trimmed signature.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Crypter">
            <summary>
            Used to encrypt or decrypt data using a given key set.
            </summary>
        </member>
        <member name="T:Keyczar.Encrypter">
            <summary>
             Encrypts data using a given key set.
            </summary>
        </member>
        <member name="M:Keyczar.Encrypter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Encrypter"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.Encrypter.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Encrypter"/> class.
            </summary>
            <param name="keySet">The key set.</param>
            <exception cref="T:Keyczar.InvalidKeySetException">This key set can not be used for encryption.</exception>
        </member>
        <member name="M:Keyczar.Encrypter.Encrypt(System.String)">
            <summary>
            Encrypts the specified raw string data.
            </summary>
            <param name="rawData">The raw string data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Encrypter.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Encrypter.Encrypt(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inputLength">(optional) Length of the input.</param>
        </member>
        <member name="P:Keyczar.Encrypter.Compression">
            <summary>
            Gets or sets the compression.
            </summary>
            <value>The compression.</value>
        </member>
        <member name="M:Keyczar.Crypter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Crypter"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.Crypter.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Crypter"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.Crypter.Decrypt(Keyczar.WebBase64)">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypter.Decrypt(System.Byte[])">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypter.Decrypt(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Decrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <exception cref="T:Keyczar.InvalidCryptoDataException">Ciphertext was invalid!</exception>
        </member>
        <member name="T:Keyczar.Crypto.Streams.AsymmetricStream">
            <summary>
            Bouncy Castle Asymmetric encryption
            </summary>
        </member>
        <member name="T:Keyczar.Crypto.Streams.FinishingStream">
            <summary>
            Abstract stream type that requires a finish method to be called
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.FinishingStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.FinishingStream.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.Streams.FinishingStream.Finish">
            <summary>
            Finishes this instance.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.FinishingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.FinishingStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.FinishingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:Keyczar.Crypto.Streams.FinishingStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Crypto.Streams.FinishingStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Crypto.Streams.FinishingStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Crypto.Streams.FinishingStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:Keyczar.Crypto.Streams.FinishingStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.AsymmetricStream.#ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher,System.IO.Stream,System.Action{Org.BouncyCastle.Crypto.IBufferedCipher,System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Crypto.Streams.AsymmetricStream"/> class.
            </summary>
            <param name="cipher">The cipher.</param>
            <param name="output">The output.</param>
            <param name="initFunc">The init func.</param>
            <param name="encrypt">if set to <c>true</c> [encrypt].</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.AsymmetricStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.AsymmetricStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.AsymmetricStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:Keyczar.InvalidCryptoDataException"></exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.AsymmetricStream.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.Streams.AsymmetricStream.Finish">
            <summary>
            Finishes this instance.
            </summary>
            <exception cref="T:Keyczar.InvalidCryptoDataException"></exception>
        </member>
        <member name="T:Keyczar.Crypto.Streams.DigestStream">
            <summary>
            Bouncy Castle based Digest STream
            </summary>
        </member>
        <member name="T:Keyczar.Crypto.Streams.VerifyingStream">
            <summary>
            Stream that can verify a stream when finished
            </summary>
        </member>
        <member name="T:Keyczar.Crypto.Streams.HashingStream">
            <summary>
            Stream the provides a hash value when finished
            </summary>
        </member>
        <member name="P:Keyczar.Crypto.Streams.HashingStream.HashValue">
            <summary>
            Gets the hash value.
            </summary>
            <value>The hash value.</value>
        </member>
        <member name="M:Keyczar.Crypto.Streams.VerifyingStream.VerifySignature(System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DigestStream.#ctor(Org.BouncyCastle.Crypto.ISigner)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Crypto.Streams.DigestStream"/> class.
            </summary>
            <param name="dsaDigestSigner">The DSA digest signer.</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DigestStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DigestStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DigestStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DigestStream.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DigestStream.Finish">
            <summary>
            Finishes this instance.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DigestStream.VerifySignature(System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.Crypto.Streams.DigestStream.HashValue">
            <summary>
            Gets the hash value.
            </summary>
            <value>The hash value.</value>
        </member>
        <member name="T:Keyczar.Crypto.Streams.DummyStream">
            <summary>
            A Dummy Stream to fake verification if the key hash doesn't match
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DummyStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DummyStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DummyStream.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DummyStream.Finish">
            <summary>
            Finishes this instance.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DummyStream.VerifySignature(System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.Crypto.Streams.DummyStream.HashValue">
            <summary>
            Gets the hash value.
            </summary>
            <value>The hash value.</value>
        </member>
        <member name="T:Keyczar.Crypto.Streams.HmacStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.HmacStream.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.Streams.HmacStream.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Crypto.Streams.HmacStream"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.HmacStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.HmacStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.HmacStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.HmacStream.Finish">
            <summary>
            Finishes this instance.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.HmacStream.VerifySignature(System.Byte[])">
            <summary>
            Verifies the signature.
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.Crypto.Streams.HmacStream.HashValue">
            <summary>
            Gets the hash value.
            </summary>
            <value>The hash value.</value>
        </member>
        <member name="T:Keyczar.Crypto.Streams.DotNetSymmetricStream">
            <summary>
            standard microsoft targeted symmetric encryption wrapper
            </summary>
        </member>
        <member name="T:Keyczar.Crypto.Streams.CipherTextOnlyFinishingStream">
            <summary>
            Finishing Stream that implements the ICipherTextOnly interface
            </summary>
        </member>
        <member name="T:Keyczar.Crypto.Streams.ICipherTextOnly">
            <summary>
            Interface for supporting output of the ciphertext without any other bytes such as the IV
            </summary>
        </member>
        <member name="P:Keyczar.Crypto.Streams.ICipherTextOnly.CipherTextOnly">
            <summary>
            Gets or sets a value indicating whether the output is  the [cipher text only].
            </summary>
            <value><c>true</c> if [cipher text only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.Crypto.Streams.ICipherTextOnly.IV">
            <summary>
            Gets or sets the IV.
            </summary>
            <value>The IV.</value>
        </member>
        <member name="P:Keyczar.Crypto.Streams.CipherTextOnlyFinishingStream.CipherTextOnly">
            <summary>
            Gets or sets a value indicating whether the output is  the [cipher text only].
            </summary>
            <value><c>true</c> if [cipher text only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.Crypto.Streams.CipherTextOnlyFinishingStream.IV">
            <summary>
            Gets or sets the IV.
            </summary>
            <value>The IV.</value>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DotNetSymmetricStream.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DotNetSymmetricStream.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Crypto.Streams.DotNetSymmetricStream"/> class.
            </summary>
            <param name="algorithm">The alg.</param>
            <param name="output">The output.</param>
            <param name="tagSize">Size of the tag.</param>
            <param name="encrypt">if set to <c>true</c> [encrypt].</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DotNetSymmetricStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DotNetSymmetricStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DotNetSymmetricStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.DotNetSymmetricStream.Finish">
            <summary>
            Finishes this instance.
            </summary>
        </member>
        <member name="P:Keyczar.Crypto.Streams.DotNetSymmetricStream.CipherTextOnly">
            <summary>
            Gets or sets a value indicating whether the output is  the [cipher text only].
            </summary>
            <value><c>true</c> if [cipher text only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.Crypto.Streams.DotNetSymmetricStream.IV">
            <summary>
            Gets or sets the IV.
            </summary>
            <value>The IV.</value>
        </member>
        <member name="T:Keyczar.Crypto.Streams.SymmetricStream">
            <summary>
            Bouncy Castle target symmetric encryption wrapper
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.Streams.SymmetricStream.#ctor(Org.BouncyCastle.Crypto.IBufferedCipher,System.IO.Stream,System.Byte[],System.Int32,System.Action{System.Byte[],Org.BouncyCastle.Crypto.IBufferedCipher,System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Crypto.Streams.SymmetricStream"/> class.
            </summary>
            <param name="cipher">The cipher.</param>
            <param name="output">The output.</param>
            <param name="iv">The iv.</param>
            <param name="tagSize">Size of the tag.</param>
            <param name="initFunc">The init func.</param>
            <param name="encrypt">if set to <c>true</c> [encrypt].</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.SymmetricStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.SymmetricStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Crypto.Streams.SymmetricStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Crypto.Streams.SymmetricStream.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.Streams.SymmetricStream.Finish">
            <summary>
            Finishes this instance.
            </summary>
        </member>
        <member name="P:Keyczar.Crypto.Streams.SymmetricStream.CipherTextOnly">
            <summary>
            Gets or sets a value indicating whether the output is  the [cipher text only].
            </summary>
            <value><c>true</c> if [cipher text only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.Crypto.Streams.SymmetricStream.IV">
            <summary>
            Gets or sets the IV.
            </summary>
            <value>The IV.</value>
        </member>
        <member name="T:Keyczar.Crypto.IKey">
            <summary>
            Interface for all keys
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.IKey.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.IKey.GetFallbackKeyHash">
            <summary>
            Gets the fallback key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Crypto.IPbeKey">
            <summary>
             Interface for keys that can be use for PBE encryption of keys
            </summary>
        </member>
        <member name="T:Keyczar.Crypto.ISignerKey">
            <summary>
            interfaces for keys that can be used for signing &amp; verifying
            </summary>
        </member>
        <member name="T:Keyczar.Crypto.IVerifierKey">
            <summary>
            Interface for keys that can be used for verifying
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.IVerifierKey.GetVerifyingStream">
            <summary>
            Gets the verifying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.ISignerKey.GetSigningStream">
            <summary>
            Gets the signing stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Crypto.IEncrypterKey">
            <summary>
            interface for keys that can be used for encrypting
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.IEncrypterKey.GetEncryptingStream(System.IO.Stream)">
            <summary>
            Gets the encrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.IEncrypterKey.GetAuthSigningStream">
            <summary>
            Gets the authentication signing stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Crypto.ICrypterKey">
            <summary>
            interface for keys that can be used for encrypting or decrypting
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.ICrypterKey.GetDecryptingStream(System.IO.Stream)">
            <summary>
            Gets the decrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.ICrypterKey.GetAuthVerifyingStream">
            <summary>
            Gets the authentication verifying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Crypto.IPrivateKey">
            <summary>
            interface for private key of public/private key encryption
            </summary>
        </member>
        <member name="P:Keyczar.Crypto.IPrivateKey.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="T:Keyczar.StandardKeySetWriterOperations">
            <summary>
            Extension methods for IKeySetWriter
            </summary>
        </member>
        <member name="M:Keyczar.StandardKeySetWriterOperations.Write(Keyczar.IKeySetWriter,Keyczar.Key,System.Int32)">
            <summary>
            Writes the specified key.
            </summary>
            <param name="writer">The writer.</param>
            <param name="key">The key.</param>
            <param name="version">The version.</param>
        </member>
        <member name="T:Keyczar.INonSeparatedMetadataAndKey">
            <summary>
            KeyWriter that always needs to rewrite out it's key data even there is only a meta data change
            </summary>
        </member>
        <member name="T:Keyczar.IKeySetWriter">
            <summary>
            Interface for mechanisms to store keysets
            </summary>
        </member>
        <member name="M:Keyczar.IKeySetWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes the specified key data.
            </summary>
            <param name="keyData">The key data.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Keyczar.IKeySetWriter.Write(Keyczar.KeyMetadata)">
            <summary>
            Writes the specified metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Keyczar.IKeySetWriter.Finish">
            <summary>
            Finishes this writing of the key.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.MutableKeySet">
            <summary>
            Mutable Keyset to allow modification and saving
            </summary>
        </member>
        <member name="T:Keyczar.IKeySet">
            <summary>
            Defines methods for getting keys out of a key set
            </summary>
        </member>
        <member name="M:Keyczar.IKeySet.GetKeyData(System.Int32)">
            <summary>
            Gets the binary data that the key is stored in.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.IKeySet.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="M:Keyczar.MutableKeySet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.MutableKeySet"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Keyczar.MutableKeySet.#ctor(Keyczar.KeyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.MutableKeySet"/> class.
            </summary>
            <param name="emptyKeySet">The metadata of an empty key set.</param>
            <exception cref="T:Keyczar.InvalidKeySetException">Only empty key sets can be created using just the KeyMetadata.</exception>
        </member>
        <member name="M:Keyczar.MutableKeySet.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.MutableKeySet"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.MutableKeySet.#ctor(Keyczar.KeyMetadata,System.Collections.Generic.IDictionary{System.Int32,Keyczar.Key})">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.MutableKeySet"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Keyczar.MutableKeySet.Save(Keyczar.IKeySetWriter)">
            <summary>
            Saves using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Keyczar.MutableKeySet.AddKey(Keyczar.KeyStatus,System.Int32,System.Object)">
            <summary>
            Adds the key.
            </summary>
            <param name="status">The status.</param>
            <param name="keySize">Size of the key.</param>
            <param name="options">The options. dictionary or annoymous type of properties to set</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.MutableKeySet.AddKey(Keyczar.KeyStatus,Keyczar.Key)">
            <summary>
            Adds the key.
            </summary>
            <param name="status">The status.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.MutableKeySet.Promote(System.Int32)">
            <summary>
            Promotes the specified version.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.MutableKeySet.ForceKeyDataChange">
            <summary>
            Forces the flag for the says the key data has change.
            </summary>
        </member>
        <member name="M:Keyczar.MutableKeySet.Demote(System.Int32)">
            <summary>
            Demotes the specified version.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.MutableKeySet.Revoke(System.Int32)">
            <summary>
            Revokes the specified version.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.MutableKeySet.PublicKey">
            <summary>
            Returns keyset with only the public keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.MutableKeySet.GetKeyData(System.Int32)">
            <summary>
            Gets the binary data that the key is stored in.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.MutableKeySet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.MutableKeySet.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.MutableKeySet"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.MutableKeySet.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Keyczar.MutableKeySet.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Keyczar.EncryptedKeySetWriter">
            <summary>
            Encrypts a keys before passing them to another keysetwriter
            </summary>
        </member>
        <member name="M:Keyczar.EncryptedKeySetWriter.#ctor(Keyczar.IKeySetWriter,Keyczar.Encrypter)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.EncryptedKeySetWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="encrypter">The encrypter.</param>
        </member>
        <member name="M:Keyczar.EncryptedKeySetWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes the specified key data.
            </summary>
            <param name="keyData">The key data.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Keyczar.EncryptedKeySetWriter.Write(Keyczar.KeyMetadata)">
            <summary>
            Writes the specified metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Keyczar.EncryptedKeySetWriter.Finish">
            <summary>
            Finishes this writing of the key.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.KeySetWriter">
            <summary>
            Writes a keyset using the standard storage format
            </summary>
        </member>
        <member name="M:Keyczar.KeySetWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeySetWriter"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Keyczar.KeySetWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes the specified key data.
            </summary>
            <param name="keyData">The key data.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Keyczar.KeySetWriter.Write(Keyczar.KeyMetadata)">
            <summary>
            Writes the specified metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Keyczar.KeySetWriter.Finish">
            <summary>
            Finishes this writing of the key.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Compat.ImportedKeySet">
            <summary>
            Imported Keyset, can be used for compatiblity with keys stored as PEM,DER or X509 certificates
            </summary>
        </member>
        <member name="F:Keyczar.Compat.ImportedKeySet.Import">
            <summary>
            Methods of this property are the import commands
            </summary>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.#ctor(Keyczar.Key,Keyczar.KeyPurpose,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Compat.ImportedKeySet"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="purpose">The purpose.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.GetKeyData(System.Int32)">
            <summary>
            Gets the binary data that the key is stored in.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.Compat.ImportedKeySet"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Keyczar.Compat.ImportedKeySet.Metadata">
            <summary>
            Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="T:Keyczar.Compat.ImportedKeySet.Importer">
            <summary>
            Turns files into importedkeysets
            </summary>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Importer.PkcsKey(Keyczar.KeyPurpose,System.String,System.Func{System.String})">
            <summary>
            Import the PKCS key.
            </summary>
            <param name="purpose">The purpose.</param>
            <param name="path">The path.</param>
            <param name="passwordPrompt">The pass phrase prompt.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Importer.PkcsKey(Keyczar.KeyPurpose,System.IO.Stream,System.Func{System.String})">
            <summary>
            Import the PKCS key.
            </summary>
            <param name="purpose">The purpose.</param>
            <param name="input">The input.</param>
            <param name="passwordPrompt">The pass phrase prompt.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidKeySetException">DSA key cannot be used for encryption and decryption!</exception>
            <exception cref="T:Keyczar.InvalidKeySetException">Unsupported key type!</exception>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Importer.X509Certificate(Keyczar.KeyPurpose,System.String)">
            <summary>
            Imports the X509 the certificate.
            </summary>
            <param name="purpose">The purpose.</param>
            <param name="path">The path.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidKeySetException">DSA key cannot be used for encryption and decryption!</exception>
            <exception cref="T:Keyczar.InvalidKeySetException">Unsupported key type!</exception>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Importer.X509Certificate(Keyczar.KeyPurpose,System.IO.Stream)">
            <summary>
            Imports the X509 certificate.
            </summary>
            <param name="purpose">The purpose.</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Compat.ImportedKeySet.Importer.PasswordFinder">
            <summary>
             password finder used for bouncy castle api
            </summary>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Importer.PasswordFinder.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Compat.ImportedKeySet.Importer.PasswordFinder"/> class.
            </summary>
            <param name="password">The passsword.</param>
        </member>
        <member name="M:Keyczar.Compat.ImportedKeySet.Importer.PasswordFinder.GetPassword">
            <summary>
            Gets the password.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.PbeKeySetWriter">
            <summary>
            Password Based Encrypted Key Set
            </summary>
        </member>
        <member name="M:Keyczar.PbeKeySetWriter.#ctor(Keyczar.IKeySetWriter,System.Func{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.PbeKeySetWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="passwordPrompt">The password prompt.</param>
            <param name="iterationCount">The interations count.</param>
        </member>
        <member name="M:Keyczar.PbeKeySetWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes the specified key data.
            </summary>
            <param name="keyData">The key data.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Keyczar.PbeKeySetWriter.Write(Keyczar.KeyMetadata)">
            <summary>
            Writes the specified metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Keyczar.PbeKeySetWriter.Finish">
            <summary>
            Finishes this writing of the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.PbeKeySetWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.PbeKeySetWriter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.PbeKeySetWriter"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.PbeKeySetWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Keyczar.Pbe.PbeHashType">
            <summary>
            Type of Hash to use for the Password Derived Bytes
            </summary>
        </member>
        <member name="T:Keyczar.Util.StringType">
            <summary>
            Strong typing to string variables
            </summary>
        </member>
        <member name="M:Keyczar.Util.StringType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.StringType"/> class.
            </summary>
            <param name="identifier">The identifer.</param>
        </member>
        <member name="M:Keyczar.Util.StringType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Keyczar.Util.StringType.op_Equality(Keyczar.Util.StringType,Keyczar.Util.StringType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Keyczar.Util.StringType.op_Inequality(Keyczar.Util.StringType,Keyczar.Util.StringType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Keyczar.Util.StringType.Equals(Keyczar.Util.StringType)">
            <summary>
            Determines whether the specified <see cref="T:Keyczar.Util.StringType"/> is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.StringType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Keyczar.Util.StringType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Keyczar.Util.StringType.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="F:Keyczar.Pbe.PbeHashType.HmacSha1">
            <summary>
            Hmac Sha1
            </summary>
        </member>
        <member name="F:Keyczar.Pbe.PbeHashType.HmacSha256">
            <summary>
            Hmac Sha256
            </summary>
        </member>
        <member name="M:Keyczar.Pbe.PbeHashType.op_Implicit(System.String)~Keyczar.Pbe.PbeHashType">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Keyczar.Pbe.PbeHashType"/>.
            </summary>
            <param name="identifier">The identifer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Keyczar.Pbe.PbeHashType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Pbe.PbeHashType"/> class.
            </summary>
            <param name="identifier">The identifer.</param>
        </member>
        <member name="T:Keyczar.Pbe.PbeKeyStore">
            <summary>
            Stores a key encrypted by password
            </summary>
        </member>
        <member name="M:Keyczar.Pbe.PbeKeyStore.EncryptKeyData(System.Byte[],System.Func{System.String},System.Int32)">
            <summary>
            Encrypts the key data.
            </summary>
            <param name="key">The key.</param>
            <param name="passwordPrompt">The password prompt.</param>
            <param name="iterationCount">The interation count.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Pbe.PbeKeyStore.GetDerivedBytes(System.Int32,System.Func{System.String})">
            <summary>
            Gets the derived bytes using the store's parameters
            </summary>
            <param name="length">The length.</param>
            <param name="passwordPrompt">The password prompt.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidKeySetException">Hmac_Sha256 not supported.</exception>
        </member>
        <member name="M:Keyczar.Pbe.PbeKeyStore.DecryptKeyData(System.Func{System.String})">
            <summary>
            Decrypts the key data.
            </summary>
            <param name="passwordPrompt">The passsword prompt.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.Pbe.PbeKeyStore.Cipher">
            <summary>
            Gets or sets the cipher.
            </summary>
            <value>The cipher.</value>
        </member>
        <member name="P:Keyczar.Pbe.PbeKeyStore.Hmac">
            <summary>
            Gets or sets the hmac.
            </summary>
            <value>The hmac.</value>
        </member>
        <member name="P:Keyczar.Pbe.PbeKeyStore.IterationCount">
            <summary>
            Gets or sets the iteration count.
            </summary>
            <value>The iteration count.</value>
        </member>
        <member name="P:Keyczar.Pbe.PbeKeyStore.IV">
            <summary>
            Gets or sets the IV.
            </summary>
            <value>The IV.</value>
        </member>
        <member name="P:Keyczar.Pbe.PbeKeyStore.Key">
            <summary>
            Gets or sets the encrypted key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Keyczar.Pbe.PbeKeyStore.Salt">
            <summary>
            Gets or sets the salt.
            </summary>
            <value>The salt.</value>
        </member>
        <member name="T:Keyczar.KeyType">
            <summary>
            Metadata for Key Types
            </summary> 
        </member>
        <member name="F:Keyczar.KeyType.Aes">
            <summary>
            Aes key
            </summary>
        </member>
        <member name="F:Keyczar.KeyType.HmacSha1">
            <summary>
            Hmac Sha1 key
            </summary>
        </member>
        <member name="F:Keyczar.KeyType.DsaPriv">
            <summary>
            DSA Private Key
            </summary>
        </member>
        <member name="F:Keyczar.KeyType.DsaPub">
            <summary>
            Dsa Public key
            </summary>
        </member>
        <member name="F:Keyczar.KeyType.RsaPriv">
            <summary>
            RSA private key
            </summary>
        </member>
        <member name="F:Keyczar.KeyType.RsaPub">
            <summary>
            Rsa public key type
            </summary>
        </member>
        <member name="F:Keyczar.KeyType.AesAead">
            <summary>
            Unofficial type AES Authenticated Encryption with Associated Data
            </summary>
        </member>
        <member name="M:Keyczar.KeyType.ForType(System.Type)">
            <summary>
            Get KeyType for the clr type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyType.DefineSpec(Keyczar.KeyType.KeyTypeSpec)">
            <summary>
            Defines the spec.
            </summary>
            <param name="spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyType.KeySizes``1(System.Int32[])">
            <summary>
            Describes the sizes and algorithms.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keySizes">The key sizes.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyType.op_Implicit(System.String)~Keyczar.KeyType">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Keyczar.KeyType"/>.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Keyczar.KeyType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeyType"/> class.
            </summary>
            <param name="identifier">The identifer.</param>
        </member>
        <member name="M:Keyczar.KeyType.Name(System.String)">
            <summary>
            Returns or creates a keytype
            </summary>
            <param name="identifier">The identifier.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.KeyType.KeySizeOptions">
            <summary>
            Gets the key size options.
            </summary>
            <value>The key size options.</value>
        </member>
        <member name="P:Keyczar.KeyType.RepresentedType">
            <summary>
            Gets the clr type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Keyczar.KeyType.Asymmetric">
            <summary>
            Gets a value indicating whether this <see cref="T:Keyczar.KeyType"/> is a public key.
            </summary>
            <value><c>true</c> if public; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.KeyType.Unofficial">
            <summary>
            Gets a value indicating whether this <see cref="T:Keyczar.KeyType"/> is unofficial.
            </summary>
            <value><c>true</c> if unofficial; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.KeyType.DefaultSize">
            <summary>
            Gets the default size.
            </summary>
            <value>The default size.</value>
        </member>
        <member name="T:Keyczar.KeyType.KeyTypeSpec">
            <summary>
            Describes meta data about keytypes
            </summary>
        </member>
        <member name="M:Keyczar.KeyType.KeyTypeSpec.WithDigestSizes(System.Int32[])">
            <summary>
            Describes the digest sizes.
            </summary>
            <param name="sizes">The sig sizes.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyType.KeyTypeSpec.IsUnofficial">
            <summary>
            Specifies this  instance is unofficial.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyType.KeyTypeSpec.IsAsymmetric">
            <summary>
            Specifies this instance is asymmetric.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyType.KeyTypeSpec.DefineSpec">
            <summary>
            Defines the spec.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Keyczar.KeyType.KeyTypeSpec.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Keyczar.KeyType.KeyTypeSpec.RepresentedType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Keyczar.KeyType.KeyTypeSpec.KeySizes">
            <summary>
            Gets or sets the key sizes.
            </summary>
            <value>The key sizes.</value>
        </member>
        <member name="P:Keyczar.KeyType.KeyTypeSpec.DigestSizes">
            <summary>
            Gets or sets the digest sizes.
            </summary>
            <value>The digest sizes.</value>
        </member>
        <member name="P:Keyczar.KeyType.KeyTypeSpec.Unofficial">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Keyczar.KeyType.KeyTypeSpec"/> is unofficial.
            </summary>
            <value><c>true</c> if unofficial; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.KeyType.KeyTypeSpec.Asymmetric">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Keyczar.KeyType.KeyTypeSpec"/> is asymmetric.
            </summary>
            <value><c>true</c> if asymmetric; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Keyczar.Crypto.AesKey">
            <summary>
            Encrypts AES
            </summary>
        </member>
        <member name="T:Keyczar.Key">
            <summary>
            Base class for all crypt/sign Keys
            </summary>
        </member>
        <member name="M:Keyczar.Key.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Key.GetFallbackKeyHash">
            <summary>
            Gets the fallback key hashes. old/buggy hashes from old/other keyczar implementations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Key.Read(Keyczar.KeyType,System.Byte[])">
            <summary>
            Reads the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="keyData">The key data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Key.Generate(Keyczar.KeyType,System.Int32)">
            <summary>
            Generates the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="size">The size.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidKeyTypeException"></exception>
        </member>
        <member name="M:Keyczar.Key.GenerateKey(System.Int32)">
            <summary>
            Generates the key.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Keyczar.Key.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Key.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Keyczar.Key.KeyType">
            <summary>
            Gets the key type.
            </summary>
            <value>The key type.</value>
        </member>
        <member name="P:Keyczar.Key.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="F:Keyczar.Crypto.AesKey.BlockLength">
            <summary>
            Block size is 128bits
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.GetFallbackKeyHash">
            <summary>
            Gets the fallback key hashes. old/buggy hashes from old/other keyczar implementations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Crypto.AesKey"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.GenerateKey(System.Int32)">
            <summary>
            Generates the key.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.GetAuthSigningStream">
            <summary>
            Gets the authentication signing stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.GetAuthVerifyingStream">
            <summary>
            Gets the authentication verifying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.GetMode">
            <summary>
            Gets the mode.
            </summary>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidKeyTypeException">Unsupport AES Mode: </exception>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.GetEncryptingStream(System.IO.Stream)">
            <summary>
            Gets the encrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.AesKey.GetDecryptingStream(System.IO.Stream)">
            <summary>
            Gets the decrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.Crypto.AesKey.Mode">
            <summary>
            Gets or sets the mode only CBC supported.
            </summary>
            <value>The block cipher mode.</value>
        </member>
        <member name="P:Keyczar.Crypto.AesKey.AesKeyBytes">
            <summary>
            Gets or sets the aes key bytes.
            </summary>
            <value>The aes key bytes.</value>
        </member>
        <member name="P:Keyczar.Crypto.AesKey.HmacKey">
            <summary>
            Gets or sets the hmac key.
            </summary>
            <value>The hmac key.</value>
        </member>
        <member name="T:Keyczar.PbeKeySet">
            <summary>
            Password based encrypted Key Set
            </summary>
        </member>
        <member name="M:Keyczar.PbeKeySet.#ctor(System.String,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.PbeKeySet"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
            <param name="passwordPrompt">The password prompt.</param>
        </member>
        <member name="M:Keyczar.PbeKeySet.#ctor(Keyczar.IKeySet,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.EncryptedKeySet"/> class.
            </summary>
            <param name="keySet">The key set.</param>
            <param name="passwordPrompt">The password prompt.</param>
        </member>
        <member name="M:Keyczar.PbeKeySet.GetKeyData(System.Int32)">
            <summary>
            Gets the binary data that the key is stored in.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.PbeKeySet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.PbeKeySet.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.PbeKeySet"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.PbeKeySet.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Keyczar.PbeKeySet.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Keyczar.Pbe.PbeKeyType">
            <summary>
            Type of cipher to use for encrypting keys with password.
            </summary>
        </member>
        <member name="F:Keyczar.Pbe.PbeKeyType.Aes128">
            <summary>
            AES 128
            </summary>
        </member>
        <member name="M:Keyczar.Pbe.PbeKeyType.op_Implicit(System.String)~Keyczar.Pbe.PbeKeyType">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Keyczar.Pbe.PbeKeyType"/>.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Keyczar.Pbe.PbeKeyType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Pbe.PbeKeyType"/> class.
            </summary>
            <param name="identifier">The identifer.</param>
        </member>
        <member name="T:Keyczar.ISessionKeyPacker">
            <summary>
            Interface for mechanisms to pack a key into an array
            </summary>
        </member>
        <member name="M:Keyczar.ISessionKeyPacker.Pack(Keyczar.Key)">
            <summary>
            Packs the specified key into bytes
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.ISessionKeyPacker.Unpack(System.Byte[])">
            <summary>
            Unpacks the specified bytes into a key.
            </summary>
            <param name="data">The bytes.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.SessionCrypter">
            <summary>
            Crypter for Asymmetic key exchange and Symmetric encryption
            </summary>
        </member>
        <member name="M:Keyczar.SessionCrypter.#ctor(Keyczar.Encrypter,Keyczar.AttachedSigner,System.Nullable{System.Int32},Keyczar.KeyType,Keyczar.ISessionKeyPacker)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.SessionCrypter"/> class.
            </summary>
            <param name="keyEncrypter">The key encrypter.</param>
            <param name="signer">The signer, optionally used to certify sender. (Equivialent to SignedSessionEncrypter)</param>
            <param name="keySize">Size of the key.</param>
            <param name="symmetricKeyType">Type of the symmetric key. (requires unofficial keypacker)</param>
            <param name="keyPacker">The key packer.</param>
            <exception cref="T:System.ArgumentException">Without a supplying a keypacker you may only use KeyType.AES;symmetricKeyType</exception>
        </member>
        <member name="M:Keyczar.SessionCrypter.#ctor(Keyczar.Crypter,Keyczar.WebBase64,Keyczar.AttachedVerifier,Keyczar.ISessionKeyPacker)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.SessionCrypter"/> class.
            </summary>
            <param name="keyDecrypter">The key decrypter.</param>
            <param name="sessionMaterial">The session material.</param>
            <param name="verifier">The verifier, optionally used to certify sender. (Equivialent to SignedSessionDecrypter)</param>
            <param name="keyPacker">The key packer.</param>
        </member>
        <member name="M:Keyczar.SessionCrypter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.SessionCrypter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.SessionCrypter"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.SessionCrypter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.SessionCrypter.Decrypt(Keyczar.WebBase64)">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.Decrypt(System.Byte[])">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.Decrypt(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Decrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <exception cref="T:Keyczar.InvalidCryptoDataException">Can't decrypted, when in signer is provided</exception>
        </member>
        <member name="M:Keyczar.SessionCrypter.Encrypt(System.String)">
            <summary>
            Encrypts the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.Encrypt(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <exception cref="T:Keyczar.InvalidCryptoDataException">Can't encrypt, when verifier is provided</exception>
        </member>
        <member name="P:Keyczar.SessionCrypter.SessionMaterial">
            <summary>
            Gets the session material.
            </summary>
            <value>The session material.</value>
        </member>
        <member name="P:Keyczar.SessionCrypter.Compression">
            <summary>
            Gets or sets the compression.
            </summary>
            <value>The compression.</value>
        </member>
        <member name="T:Keyczar.SessionCrypter.NonceSessionMaterial">
            <summary>
            Nonce Json Session Material;
            </summary>
        </member>
        <member name="M:Keyczar.SessionCrypter.NonceSessionMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.SessionCrypter.NonceSessionMaterial"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.SessionCrypter.NonceSessionMaterial.#ctor(Keyczar.Crypto.AesKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.SessionCrypter.NonceSessionMaterial"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Keyczar.SessionCrypter.NonceSessionMaterial.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Keyczar.SessionCrypter.NonceSessionMaterial.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="T:Keyczar.SessionCrypter.IInteroperableSessionMaterialPacker">
            <summary>
            Interface for special cased keyczar defined signed sessions.
            </summary>
        </member>
        <member name="M:Keyczar.SessionCrypter.IInteroperableSessionMaterialPacker.PackMaterial(Keyczar.SessionCrypter.NonceSessionMaterial)">
            <summary>
            Packs the material.
            </summary>
            <param name="material">The material.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.IInteroperableSessionMaterialPacker.UnpackMaterial(System.Byte[])">
            <summary>
            Unpacks the material.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.SessionCrypter.NonceSignedSessionPacker">
            <summary>
            Standard key packer for SignedSessions, only packs AES-Then-HmacSha1
            </summary>
        </member>
        <member name="M:Keyczar.SessionCrypter.NonceSignedSessionPacker.Keyczar#ISessionKeyPacker#Pack(Keyczar.Key)">
            <summary>
            Packs the specified key into bytes
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.NonceSignedSessionPacker.Keyczar#ISessionKeyPacker#Unpack(System.Byte[])">
            <summary>
            Unpacks the specified bytes into a key.
            </summary>
            <param name="data">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.NonceSignedSessionPacker.PackMaterial(Keyczar.SessionCrypter.NonceSessionMaterial)">
            <summary>
            Packs the material.
            </summary>
            <param name="material">The material.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.NonceSignedSessionPacker.UnpackMaterial(System.Byte[])">
            <summary>
            Unpacks the material.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.SessionCrypter.SimpleAesHmacSha1KeyPacker">
            <summary>
            Standard key packer, only packs AES-Then-HmacSha1
            </summary>
        </member>
        <member name="M:Keyczar.SessionCrypter.SimpleAesHmacSha1KeyPacker.Pack(Keyczar.Key)">
            <summary>
            Packs the specified key into bytes
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.SessionCrypter.SimpleAesHmacSha1KeyPacker.Unpack(System.Byte[])">
            <summary>
            Unpacks the specified bytes into a key.
            </summary>
            <param name="data">The bytes.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.TimeoutSigner">
            <summary>
            Signs data with an Expiration date &amp; time.
            </summary>
        </member>
        <member name="T:Keyczar.TimeoutVerifier">
            <summary>
            Verifies signatures with an expiration date &amp; time
            </summary>
        </member>
        <member name="F:Keyczar.TimeoutVerifier.TimeoutLength">
            <summary>
            Binary length of expiration in signature
            </summary>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.FromDateTime(System.DateTime)">
            <summary>
            Gets binary format of the date time.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.TimeoutVerifier"/> class.
            </summary>
            <param name="keySetLocation">The keyset location.</param>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.TimeoutVerifier"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.Verify(System.String,Keyczar.WebBase64)">
            <summary>
            Verifies the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.Verify(System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Verifies the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.TimeoutVerifier.TimeoutVerifierHelper">
            <summary>
            Helper class to verify the expiration date with the data
            </summary>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.TimeoutVerifierHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.TimeoutVerifier.TimeoutVerifierHelper"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.TimeoutVerifierHelper.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.TimeoutVerifier.TimeoutVerifierHelper"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.TimeoutVerifierHelper.Verify(System.IO.Stream,System.Byte[],System.Object,System.Object,System.Int64)">
            <summary>
            Verifies the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <param name="prefixData">The prefix data.</param>
            <param name="postfixData">The post fix data.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.TimeoutVerifier.TimeoutVerifierHelper.PrefixDataVerify(Keyczar.Crypto.Streams.VerifyingStream,System.Object)">
            <summary>
            Prefixes the data before verifying.
            </summary>
            <param name="verifyingStream">The verifying stream.</param>
            <param name="extra">The extra data passed by prefixData</param>
        </member>
        <member name="M:Keyczar.TimeoutSigner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.TimeoutSigner"/> class.
            </summary>
            <param name="keySetLocation">The keyset location.</param>
        </member>
        <member name="M:Keyczar.TimeoutSigner.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.TimeoutSigner"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.TimeoutSigner.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:Keyczar.TimeoutSigner.Sign(System.String,System.DateTime)">
            <summary>
            Signs the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="expiration">The expiration.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.TimeoutSigner.Sign(System.Byte[],System.DateTime)">
            <summary>
            Signs the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="expiration">The expiration.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.TimeoutSigner.Sign(System.IO.Stream,System.DateTime,System.Int64)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="expiration">The expiration.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.TimeoutSigner.TimeoutSignerHelper">
            <summary>
            Helper subclass of signer that prefixes the data with the expiration time and then pads it into the signature
            </summary>
        </member>
        <member name="M:Keyczar.TimeoutSigner.TimeoutSignerHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.TimeoutSigner.TimeoutSignerHelper"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.TimeoutSigner.TimeoutSignerHelper.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.TimeoutSigner.TimeoutSignerHelper"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.TimeoutSigner.TimeoutSignerHelper.Sign(System.IO.Stream,System.DateTime,System.Int64)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="expiration">The expiration.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.TimeoutSigner.TimeoutSignerHelper.PrefixDataSign(Keyczar.Crypto.Streams.HashingStream,System.Object)">
            <summary>
            Prefixes the data then signs it.
            </summary>
            <param name="signingStream">The signing stream.</param>
            <param name="extra">The extra data passed by prefixData.</param>
        </member>
        <member name="M:Keyczar.TimeoutSigner.TimeoutSignerHelper.PadSignature(System.Byte[],System.IO.Stream,System.Object)">
            <summary>
            Pads the signature with extra data.
            </summary>
            <param name="signature">The signature.</param>
            <param name="outputStream">The padded signature.</param>
            <param name="extra">The extra data passed by sigData.</param>
        </member>
        <member name="T:Keyczar.Unofficial.AesAeadKey">
            <summary>
            Uses Authenticated Encryption with Associated Data Mode with AES.
            Specficially supports GCM mode.
            </summary>
        </member>
        <member name="F:Keyczar.Unofficial.AesAeadKey.BlockLength">
            <summary>
            Uses 128bit block size
            </summary>
        </member>
        <member name="F:Keyczar.Unofficial.AesAeadKey.TagLength">
            <summary>
            Uses 128bit MAC
            </summary>
        </member>
        <member name="F:Keyczar.Unofficial.AesAeadKey.NonceLength">
            <summary>
            Uses an 128bit random nonce
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Unofficial.AesAeadKey"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadKey.GenerateKey(System.Int32)">
            <summary>
            Generates the key.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadKey.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadKey.GetEncryptingStream(System.IO.Stream)">
            <summary>
            Gets the encrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadKey.GetAuthSigningStream">
            <summary>
            Gets the authentication signing stream.
            </summary>
            <returns>null as authentication is built in to the encryption</returns>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadKey.GetAuthVerifyingStream">
            <summary>
            Gets the authentication verifying stream.
            </summary>
            <returns>null as authentication is built in to the decryption</returns>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadKey.GetDecryptingStream(System.IO.Stream)">
            <summary>
            Gets the decrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadKey.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Keyczar.Unofficial.AesAeadKey.Mode">
            <summary>
            Gets or sets the mode (Only GCM is supported).
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Keyczar.Unofficial.AesAeadKey.AesKeyBytes">
            <summary>
            Gets or sets the aes key bytes.
            </summary>
            <value>The aes key bytes.</value>
        </member>
        <member name="T:Keyczar.CompressionType">
            <summary>
            Types of compression for plaintext
            </summary>
        </member>
        <member name="F:Keyczar.CompressionType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Keyczar.CompressionType.Gzip">
            <summary>
            Gzip compression
            </summary>
        </member>
        <member name="F:Keyczar.CompressionType.Zlib">
            <summary>
            Zlib compression
            </summary>
        </member>
        <member name="T:Keyczar.UnofficialNeedsExplicitUseException">
            <summary>
            Unoffical Needs Explict Use exception 
            </summary>
        </member>
        <member name="M:Keyczar.UnofficialNeedsExplicitUseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.UnofficialNeedsExplicitUseException"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.UnofficialNeedsExplicitUseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.UnofficialNeedsExplicitUseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Keyczar.UnofficialNeedsExplicitUseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.UnofficialNeedsExplicitUseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Keyczar.UnofficialNeedsExplicitUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.UnofficialNeedsExplicitUseException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Keyczar.InvalidCryptoVersionException">
            <summary>
            Unsupported keyczar version of cipher text or signature exception
            </summary>
        </member>
        <member name="M:Keyczar.InvalidCryptoVersionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidCryptoVersionException"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.InvalidCryptoVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidCryptoVersionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Keyczar.InvalidCryptoVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidCryptoVersionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Keyczar.InvalidCryptoVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidCryptoVersionException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Keyczar.InvalidCryptoDataException">
            <summary>
            Invalid Cipher text data or signature exception
            </summary>
        </member>
        <member name="M:Keyczar.InvalidCryptoDataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidCryptoDataException"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.InvalidCryptoDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidCryptoDataException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Keyczar.InvalidCryptoDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidCryptoDataException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Keyczar.InvalidCryptoDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidCryptoDataException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Keyczar.InvalidKeyTypeException">
            <summary>
            Invalid Key type for usage exception
            </summary>
        </member>
        <member name="M:Keyczar.InvalidKeyTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidKeyTypeException"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.InvalidKeyTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidKeyTypeException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Keyczar.InvalidKeyTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidKeyTypeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Keyczar.InvalidKeyTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidKeyTypeException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Keyczar.InvalidKeySetException">
            <summary>
            Invalid keyset exception
            </summary>
        </member>
        <member name="M:Keyczar.InvalidKeySetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidKeySetException"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.InvalidKeySetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidKeySetException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Keyczar.InvalidKeySetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidKeySetException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Keyczar.InvalidKeySetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.InvalidKeySetException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Keyczar.Unofficial.AesAeadStream">
            <summary>
            Wrapper for AEAD symmetric block ciphers  using bouncy castle
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadStream.#ctor(System.Func{Org.BouncyCastle.Crypto.IBlockCipher,Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher},System.IO.Stream,System.Byte[],System.Int32,System.Action{System.Byte[],Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher,System.Byte[],System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Unofficial.AesAeadStream"/> class.
            </summary>
            <param name="makeCipher">The make cipher.</param>
            <param name="outStream">The out stream.</param>
            <param name="nonce">The nonce.</param>
            <param name="tagLength">Length of the tag.</param>
            <param name="initFunc">The init func.</param>
            <param name="encrypt">if set to <c>true</c> [encrypt].</param>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadStream.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns>0 because it's done as part of the encryption &amp; decryption</returns>
        </member>
        <member name="M:Keyczar.Unofficial.AesAeadStream.Finish">
            <summary>
            Finishes this instance.
            </summary>
            <exception cref="T:Keyczar.InvalidCryptoDataException"></exception>
        </member>
        <member name="T:Keyczar.Unofficial.BlobKeySet">
            <summary>
            Reads key set from a single zipped up blob
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySet.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Unofficial.BlobKeySet"/> class.
            </summary>
            <param name="readStream">The read stream.</param>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySet.GetKeyData(System.Int32)">
            <summary>
            Gets the binary data that the key is stored in.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySet.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Keyczar.Unofficial.BlobKeySet.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Keyczar.Crypto.DsaPrivateKey">
            <summary>
            The DSA private key
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.DsaPrivateKey.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.DsaPrivateKey.GenerateKey(System.Int32)">
            <summary>
            Generates the key.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Keyczar.Crypto.DsaPrivateKey.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.DsaPrivateKey.GetSigningStream">
            <summary>
            Gets the signing stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.DsaPrivateKey.GetVerifyingStream">
            <summary>
            Gets the verifying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Keyczar.Crypto.DsaPrivateKey.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:Keyczar.Crypto.DsaPrivateKey.Keyczar#Crypto#IPrivateKey#PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:Keyczar.Crypto.DsaPrivateKey.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="T:Keyczar.Crypto.DsaPublicKey">
            <summary>
            The Dsa Public Key
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.DsaPublicKey.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.DsaPublicKey.GenerateKey(System.Int32)">
            <summary>
            Generates the key.
            </summary>
            <param name="size">The size.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Keyczar.Crypto.DsaPublicKey.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.DsaPublicKey.GetVerifyingStream">
            <summary>
            Gets the verifying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Keyczar.Crypto.DsaPublicKey.P">
            <summary>
            Gets or sets the P.
            </summary>
            <value>The P.</value>
        </member>
        <member name="P:Keyczar.Crypto.DsaPublicKey.Q">
            <summary>
            Gets or sets the Q.
            </summary>
            <value>The Q.</value>
        </member>
        <member name="P:Keyczar.Crypto.DsaPublicKey.G">
            <summary>
            Gets or sets the G.
            </summary>
            <value>The G.</value>
        </member>
        <member name="P:Keyczar.Crypto.DsaPublicKey.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="T:Keyczar.Crypto.HmacSha1Key">
            <summary>
            The Hmac 256 Sha1 key
            </summary>
        </member>
        <member name="F:Keyczar.Crypto.HmacSha1Key.HashLength">
            <summary>
            The hash size is 160 bits
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.HmacSha1Key.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.HmacSha1Key.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.HmacSha1Key.GetSigningStream">
            <summary>
            Gets the signing stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.HmacSha1Key.GetVerifyingStream">
            <summary>
            Gets the verifying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.HmacSha1Key.GenerateKey(System.Int32)">
            <summary>
            Generates the key.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="P:Keyczar.Crypto.HmacSha1Key.HmacKeyBytes">
            <summary>
            Gets or sets the hmac key bytes.
            </summary>
            <value>The hmac key bytes.</value>
        </member>
        <member name="T:Keyczar.KeyMetadata">
            <summary>
            Metadata for a keyset
            </summary>
        </member>
        <member name="M:Keyczar.KeyMetadata.Read(System.String)">
            <summary>
            Reads the specified meta data.
            </summary>
            <param name="metadata">The meta data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeyMetadata"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.KeyMetadata.#ctor(Keyczar.KeyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeyMetadata"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="P:Keyczar.KeyMetadata.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Keyczar.KeyMetadata.Purpose">
            <summary>
            Gets or sets the purpose.
            </summary>
            <value>The purpose.</value>
        </member>
        <member name="P:Keyczar.KeyMetadata.KeyType">
            <summary>
            Gets or sets the key type.
            </summary>
            <value>The key type.</value>
        </member>
        <member name="P:Keyczar.KeyMetadata.Encrypted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Keyczar.KeyMetadata"/> is encrypted.
            </summary>
            <value><c>true</c> if encrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.KeyMetadata.Versions">
            <summary>
            Gets or sets the versions.
            </summary>
            <value>The versions.</value>
        </member>
        <member name="T:Keyczar.KeyPurpose">
            <summary>
            Key purpose
            </summary>'
        </member>
        <member name="F:Keyczar.KeyPurpose.DecryptAndEncrypt">
            <summary>
            Decrypt and Encrypt
            </summary>
        </member>
        <member name="F:Keyczar.KeyPurpose.Encrypt">
            <summary>
            Encrypt
            </summary>
        </member>
        <member name="F:Keyczar.KeyPurpose.SignAndVerify">
            <summary>
            Sign and verify
            </summary>
        </member>
        <member name="F:Keyczar.KeyPurpose.Verify">
            <summary>
            Verify
            </summary>
        </member>
        <member name="M:Keyczar.KeyPurpose.op_Implicit(System.String)~Keyczar.KeyPurpose">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Keyczar.KeyPurpose"/>.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Keyczar.KeyPurpose.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeyPurpose"/> class.
            </summary>
            <param name="identifier">The identifer.</param>
        </member>
        <member name="T:Keyczar.KeyStatus">
            <summary>
            The key status
            </summary>
        </member>
        <member name="F:Keyczar.KeyStatus.Primary">
            <summary>
            Primary
            </summary>
        </member>
        <member name="F:Keyczar.KeyStatus.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="F:Keyczar.KeyStatus.Inactive">
            <summary>
            Inactive
            </summary>
        </member>
        <member name="M:Keyczar.KeyStatus.op_Implicit(System.String)~Keyczar.KeyStatus">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Keyczar.KeyStatus"/>.
            </summary>
            <param name="identifier">The identifer.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Keyczar.KeyStatus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeyStatus"/> class.
            </summary>
            <param name="identifier">The identifer.</param>
        </member>
        <member name="T:Keyczar.KeyVersion">
            <summary>
            Describes key versions
            </summary>
        </member>
        <member name="M:Keyczar.KeyVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeyVersion"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.KeyVersion.#ctor(Keyczar.KeyVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeyVersion"/> class.
            </summary>
            <param name="keyVersion">The key version.</param>
        </member>
        <member name="M:Keyczar.KeyVersion.CompareTo(Keyczar.KeyVersion)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyVersion.op_LessThan(Keyczar.KeyVersion,Keyczar.KeyVersion)">
            <summary>
            less than the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyVersion.op_GreaterThan(Keyczar.KeyVersion,Keyczar.KeyVersion)">
            <summary>
            greater thanover the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyVersion.op_Equality(Keyczar.KeyVersion,Keyczar.KeyVersion)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Keyczar.KeyVersion.op_Inequality(Keyczar.KeyVersion,Keyczar.KeyVersion)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Keyczar.KeyVersion.Equals(Keyczar.KeyVersion)">
            <summary>
            Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.KeyVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Keyczar.KeyVersion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Keyczar.KeyVersion.VersionNumber">
            <summary>
            Gets or sets the version number.
            </summary>
            <value>The version number.</value>
        </member>
        <member name="P:Keyczar.KeyVersion.Exportable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Keyczar.KeyVersion"/> is exportable.
            </summary>
            <value><c>true</c> if exportable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Keyczar.KeyVersion.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="T:Keyczar.Crypto.RsaPrivateKey">
            <summary>
            The RSA Private Key
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GenerateKey(System.Int32)">
            <summary>
            Generates the key.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GetAuthSigningStream">
            <summary>
            Gets the authentication signing stream.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GetAuthVerifyingStream">
            <summary>
            Gets the authentication verifying stream.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GetEncryptingStream(System.IO.Stream)">
            <summary>
            Gets the encrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GetDecryptingStream(System.IO.Stream)">
            <summary>
            Gets the decrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GetVerifyingStream">
            <summary>
            Gets the verifying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GetSigningStream">
            <summary>
            Gets the signing stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPrivateKey.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns>0</returns>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.PrivateExponent">
            <summary>
            Gets or sets the private exponent.
            </summary>
            <value>The private exponent.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.PrimeP">
            <summary>
            Gets or sets the prime P.
            </summary>
            <value>The prime P.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.PrimeQ">
            <summary>
            Gets or sets the prime Q.
            </summary>
            <value>The prime Q.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.PrimeExponentP">
            <summary>
            Gets or sets the prime exponent P.
            </summary>
            <value>The prime exponent P.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.PrimeExponentQ">
            <summary>
            Gets or sets the prime exponent Q.
            </summary>
            <value>The prime exponent Q.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.CrtCoefficient">
            <summary>
            Gets or sets the CRT coefficient.
            </summary>
            <value>The CRT coefficient.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.Padding">
            <summary>
            Gets or sets the padding.
            </summary>
            <value>The padding.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPrivateKey.Keyczar#Crypto#IPrivateKey#PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="T:Keyczar.Crypto.RsaPublicKey">
            <summary>
            The RSA public key
            </summary>
        </member>
        <member name="F:Keyczar.Crypto.RsaPublicKey.PkcsPadding">
            <summary>
            PkcsPadding identifier
            </summary>
        </member>
        <member name="F:Keyczar.Crypto.RsaPublicKey.OaepPadding">
            <summary>
            OaepPadding identifer
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.GetKeyHash">
            <summary>
            Gets the key hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.GetFallbackKeyHash">
            <summary>
            Gets the fallback key hashes. old/buggy hashes from old/other keyczar implementations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.GenerateKey(System.Int32)">
            <summary>
            Generates the key.
            </summary>
            <param name="size">The size.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.GetVerifyingStream">
            <summary>
            Gets the verifying stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.GetTagLength(System.Byte[])">
            <summary>
            Gets the length of the tag.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.UpdatePadding(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
            <summary>
            Updates the padding.
            </summary>
            <param name="cipher">The cipher.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidKeyTypeException"></exception>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.GetEncryptingStream(System.IO.Stream)">
            <summary>
            Gets the encrypting stream.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Crypto.RsaPublicKey.GetAuthSigningStream">
            <summary>
            Gets the authentication signing stream.
            </summary>
            <returns>null</returns>
        </member>
        <member name="P:Keyczar.Crypto.RsaPublicKey.Modulus">
            <summary>
            Gets or sets the modulus.
            </summary>
            <value>The modulus.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPublicKey.PublicExponent">
            <summary>
            Gets or sets the public exponent.
            </summary>
            <value>The public exponent.</value>
        </member>
        <member name="P:Keyczar.Crypto.RsaPublicKey.Padding">
            <summary>
            Gets or sets the padding.
            </summary>
            <value>The padding. If not set uses OEAP padding</value>
        </member>
        <member name="T:Keyczar.Unofficial.BlobKeySetWriter">
            <summary>
            Writes keyset to a single zipped up blob
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySetWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Unofficial.BlobKeySetWriter"/> class.
            </summary>
            <param name="writeStream">The write stream.</param>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySetWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes the specified key data.
            </summary>
            <param name="keyData">The key data.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySetWriter.Write(Keyczar.KeyMetadata)">
            <summary>
            Writes the specified metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySetWriter.Finish">
            <summary>
            Finishes this writing of the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySetWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySetWriter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.Unofficial.BlobKeySetWriter"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.BlobKeySetWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Keyczar.Unofficial.BsonSessionKeyPacker">
            <summary>
            Packs a key including type into a single bson binary array
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.BsonSessionKeyPacker.Pack(Keyczar.Key)">
            <summary>
            Packs the specified key into bytes
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Unofficial.BsonSessionKeyPacker.Unpack(System.Byte[])">
            <summary>
            Unpacks the specified bytes into a key.
            </summary>
            <param name="data">The bytes.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Unofficial.BsonSessionKeyPacker.KeyPack`1">
            <summary>
            Format for packing the key in bson
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Keyczar.Unofficial.BsonSessionKeyPacker.KeyPack`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Unofficial.BsonSessionKeyPacker.KeyPack`1"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Keyczar.Unofficial.BsonSessionKeyPacker.KeyPack`1.KeyType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Keyczar.Unofficial.BsonSessionKeyPacker.KeyPack`1.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Keyczar.Unofficial.WebKeySet">
            <summary>
            Access and Public Key Set or Encrypted KeySet from the web.
            </summary>
        </member>
        <member name="M:Keyczar.Unofficial.WebKeySet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Unofficial.WebKeySet"/> class.
            </summary>
            <param name="webUrl">The web URL.</param>
        </member>
        <member name="M:Keyczar.Unofficial.WebKeySet.GetKeyData(System.Int32)">
            <summary>
            Gets the binary data that the key is stored in.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.Unofficial.WebKeySet.WebClient">
            <summary>
            Gets the web client.
            </summary>
            <value>
            The web client.
            </value>
        </member>
        <member name="P:Keyczar.Unofficial.WebKeySet.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="T:Keyczar.Util.CachedPrompt">
            <summary>
            Caches a password prompt result so it doesn't prompt for multiple uses.
            </summary>
        </member>
        <member name="M:Keyczar.Util.CachedPrompt.Password(System.Func{System.String})">
            <summary>
            Returns a cached version of the prompt
            </summary>
            <param name="passwordPrompt">The password prompt.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.CachedPrompt.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.CachedPrompt"/> class.
            </summary>
            <param name="passwordPrompt">The password prompt.</param>
        </member>
        <member name="M:Keyczar.Util.CachedPrompt.Prompt">
            <summary>
            Prompts for the password
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.CachedPrompt.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Util.CachedPrompt.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.Util.CachedPrompt"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.Util.CachedPrompt.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Keyczar.Util.NondestructiveBinaryReader">
            <summary>
            Reader that won't close the stream when disposed
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.NondestructiveBinaryReader"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Keyczar.Util.NondestructiveBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.NondestructiveBinaryReader"/> class.
            </summary>
            <param name="input">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
            <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="encoding"/> is null. </exception>
        </member>
        <member name="M:Keyczar.Util.NondestructiveBinaryReader.Peek">
            <summary>
            Peeks this positions byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.NondestructiveBinaryReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryReader"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Keyczar.Util.NondestructiveCryptoStream">
            <summary>
            Crypto Stream that doesn't close the underlying stream when disposed
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveCryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.NondestructiveCryptoStream"/> class.
            </summary>
            <param name="stream">The stream on which to perform the cryptographic transformation.</param>
            <param name="transform">The cryptographic transformation that is to be performed on the stream.</param>
            <param name="mode">One of the <see cref="T:System.Security.Cryptography.CryptoStreamMode"/> values.</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="stream"/> is not readable.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="stream"/> is not writable.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="stream"/> is invalid.</exception>
        </member>
        <member name="M:Keyczar.Util.NondestructiveCryptoStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.CryptoStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Keyczar.Util.NondestructivePositionLengthLimitingStream">
            <summary>
            Wraps a stream to limit it's length
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructivePositionLengthLimitingStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.NondestructivePositionLengthLimitingStream"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Keyczar.Util.NondestructivePositionLengthLimitingStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructivePositionLengthLimitingStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Util.NondestructivePositionLengthLimitingStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Keyczar.Util.NondestructivePositionLengthLimitingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Util.NondestructivePositionLengthLimitingStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Util.NondestructivePositionLengthLimitingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Util.NondestructivePositionLengthLimitingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:Keyczar.Util.NondestructivePositionLengthLimitingStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Util.NondestructivePositionLengthLimitingStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Util.NondestructivePositionLengthLimitingStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Util.NondestructivePositionLengthLimitingStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:Keyczar.Util.NondestructivePositionLengthLimitingStream.InitialPosition">
            <summary>
            Gets the initial position.
            </summary>
            <value>
            The initial position.
            </value>
        </member>
        <member name="P:Keyczar.Util.NondestructivePositionLengthLimitingStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="T:Keyczar.Util.NondestructiveStreamReader">
            <summary>
            Streamreader that won't close the stream when finished
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.NondestructiveStreamReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Keyczar.Util.NondestructiveStreamReader.Dispose(System.Boolean)">
            <summary>
            Closes the underlying stream, releases the unmanaged resources used by the <see cref="T:System.IO.StreamReader"/>, and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Keyczar.Util.NondestructiveStreamReset">
            <summary>
            Resets a stream when it's disposed or called reset
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveStreamReset.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.NondestructiveStreamReset"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Keyczar.Util.NondestructiveStreamReset.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Keyczar.Util.NondestructiveStreamReset"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveStreamReset.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveStreamReset.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Util.NondestructiveStreamReset.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveStreamReset.Reset">
            <summary>
            Resets this Stream Position.
            </summary>
        </member>
        <member name="T:Keyczar.Util.NondestructiveZipFile">
            <summary>
            Zip file that doesn't close the underlying stream when disposed
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveZipFile.Dispose(System.Boolean)">
            <summary>
            Disposes any managed resources, if the flag is set, then marks the
            instance disposed.  This method is typically not called explicitly from
            application code.
            </summary>
            <param name="disposeManagedResources">indicates whether the method should dispose streams or not.</param>
            <remarks>
            Applications should call <see cref="M:Ionic.Zip.ZipFile.Dispose">the no-arg Dispose method</see>.
            </remarks>
        </member>
        <member name="T:Keyczar.Util.NondestructiveBinaryWriter">
            <summary>
            Binary writer that doesn't close underlying stream when disposed
            </summary>
        </member>
        <member name="M:Keyczar.Util.NondestructiveBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.NondestructiveBinaryWriter"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Keyczar.Util.NondestructiveBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.NondestructiveBinaryWriter"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Keyczar.Util.NondestructiveBinaryWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Keyczar.Util.ReadOnlyArray">
            <summary>
            Read only array helper
            </summary>
        </member>
        <member name="M:Keyczar.Util.ReadOnlyArray.Create``1(``0[])">
            <summary>
            Creates the specified ReadOnlyArray with items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Util.ReadOnlyArray`1">
            <summary>
            A read only array like object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Keyczar.Util.ReadOnlyArray`1.op_Implicit(Keyczar.Util.ReadOnlyArray{`0})~`0[]">
            <summary>
            Ts the specified array.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.ReadOnlyArray`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.ReadOnlyArray`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:Keyczar.Util.ReadOnlyArray`1.Length">
            <summary>
            Gets the length. Convience to match up with Array interface, but just calls Count
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="T:Keyczar.Util.Secure">
            <summary>
            Useful security utilties
            </summary>
        </member>
        <member name="F:Keyczar.Util.Secure.Random">
            <summary>
            Random byte generator
            </summary>
        </member>
        <member name="M:Keyczar.Util.Secure.SafeDispose``1(``0)">
            <summary>
            Disposes if not null and returns null to empty variables in one line
            </summary>
            <typeparam name="T"></typeparam>
            <param name="disposable">The disposable.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Secure.Maybe``2(``0,System.Func{``0,``1},System.Func{``1})">
            <summary>
            Runs the action if the target is not null or the default action if it is null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="target">The target.</param>
            <param name="action">The action.</param>
            <param name="defaultAction">The default action.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Secure.Clear``1(``0[])">
            <summary>
            Clears the specified array.
            </summary>
            <param name="a">A.</param>
        </member>
        <member name="M:Keyczar.Util.Secure.Equals(System.Array,System.Array,System.Int32)">
            <summary>
            Compares the arrays in a conservative way.
            </summary>
            <param name="a">Array A.</param>
            <param name="b">Array b.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Util.Utility">
            <summary>
            Utility methods
            </summary>
        </member>
        <member name="M:Keyczar.Util.Utility.ResetStreamWhenFinished(System.IO.Stream)">
            <summary>
            Resets the stream poisition when Closed or Disposed.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.CopyProperties(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            Copies string/object dictionary to the destnation objects properties.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The dest.</param>
        </member>
        <member name="M:Keyczar.Util.Utility.CopyProperties(System.Object,System.Object)">
            <summary>
            Copies the properties from one object to the next
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The dest.</param>
        </member>
        <member name="M:Keyczar.Util.Utility.ToJson(System.Object)">
            <summary>
            Json Serializes the object.
            </summary>
            <param name="value">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.ToBson(System.Object)">
            <summary>
            Bson Serializes the object.
            </summary>
            <param name="value">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.ToSystemBigInteger(Org.BouncyCastle.Math.BigInteger)">
            <summary>
            To the system standard big integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.ToBouncyBigInteger(System.Numerics.BigInteger)">
            <summary>
            To the bouncy castle big integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.GetBytes(System.Int32)">
            <summary>
            Gets the bytes for an int laid out big endian
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.GetBytes(System.Int64)">
            <summary>
            Gets the bytes for a long laid out big endian
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.GetBytes(System.Numerics.BigInteger)">
            <summary>
            Gets the bytes for a long laid out big endian
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.ToBigInteger(System.Byte[])">
            <summary>
            To the BigInteger from big endian bytes.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.ToInt64(System.Byte[])">
            <summary>
            To the int64 from big endian bytes.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.ToInt32(System.Byte[])">
            <summary>
            To the int32 from big endian bytes.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.ReadHeader(System.Byte[],System.Byte[]@)">
            <summary>
            Reads the keyczar header.
            </summary>
            <param name="data">The data.</param>
            <param name="keyHash">The key hash.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.ReadHeader(System.IO.Stream,System.Byte[]@)">
            <summary>
             Reads the keyczar header.
            </summary>
            <param name="data">The data.</param>
            <param name="keyHash">The key hash.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.HashKey(System.Int32,System.Byte[][])">
            <summary>
            Hashes the key for keyczar version look ups.
            </summary>
            <param name="size">The size.</param>
            <param name="components">The components.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.HashKeyLengthPrefix(System.Int32,System.Byte[][])">
            <summary>
            Hashes each component of the key hash with it's length first.
            </summary>
            <param name="size">The size.</param>
            <param name="components">The components.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.Utility.StripLeadingZeros(System.Byte[])">
            <summary>
            Strips the leading zeros from a byte array.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.EncryptedKeySet">
            <summary>
            Wraps a key set to decrypt it
            </summary>
        </member>
        <member name="M:Keyczar.EncryptedKeySet.#ctor(System.String,Keyczar.Crypter)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.EncryptedKeySet"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
            <param name="crypter">The crypter.</param>
        </member>
        <member name="M:Keyczar.EncryptedKeySet.#ctor(Keyczar.IKeySet,Keyczar.Crypter)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.EncryptedKeySet"/> class.
            </summary>
            <param name="keySet">The key set.</param>
            <param name="crypter">The crypter.</param>
        </member>
        <member name="M:Keyczar.EncryptedKeySet.GetKeyData(System.Int32)">
            <summary>
            Gets the binary data that the key is stored in.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.EncryptedKeySet.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Keyczar.StandardKeySetOperations">
            <summary>
            Extension Methods for IKeySet
            </summary>
        </member>
        <member name="M:Keyczar.StandardKeySetOperations.GetKey(Keyczar.IKeySet,System.Int32)">
            <summary>
            Get's deep copy of Key from IKeyset
            </summary>
            <param name="keySet">The keyset.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.KeySet">
            <summary>
            standard key set
            </summary>
        </member>
        <member name="M:Keyczar.KeySet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.KeySet"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.KeySet.GetKeyData(System.Int32)">
            <summary>
            Gets the binary data that the key is stored in.
            </summary>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="P:Keyczar.KeySet.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Keyczar.Util.StringTypeJsonConverter">
            <summary>
            Converts json string to the strong typed StringType and viceversa
            </summary>
        </member>
        <member name="M:Keyczar.Util.StringTypeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Keyczar.Util.StringTypeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Keyczar.Util.StringTypeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Keyczar.AttachedSigner">
            <summary>
            Signs a message and attaches the signature
            </summary>
        </member>
        <member name="T:Keyczar.AttachedVerifier">
            <summary>
            Verifies a message with an attached signature.
            </summary>
        </member>
        <member name="M:Keyczar.AttachedVerifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.AttachedSigner"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.AttachedVerifier.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.AttachedSigner"/> class.
            </summary>
            <param name="keySet">The key set.</param>
            <exception cref="T:Keyczar.InvalidKeySetException">This key set can not be used for verifying signatures.</exception>
        </member>
        <member name="M:Keyczar.AttachedVerifier.Verify(Keyczar.WebBase64,System.Byte[])">
            <summary>
            Verifies the specified message.
            </summary>
            <param name="signedMessage">The signed message.</param>
            <param name="hidden">Optional hidden data used to generate the digest signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.AttachedVerifier.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies the specified message.
            </summary>
            <param name="signedMessage">The signed message.</param>
            <param name="hidden">Optional hidden data used to generate the digest signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.AttachedVerifier.Verify(System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Verifies the specified message.
            </summary>
            <param name="input">The input.</param>
            <param name="hidden">Optional hidden data used to generate the digest signature.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.AttachedVerifier.VerifiedMessage(Keyczar.WebBase64,System.Byte[])">
            <summary>
            Gets Verified message from signed message
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="hidden">Optional hidden data used to generate the digest signature.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidCryptoDataException">Data Doesn't Match Signature!</exception>
        </member>
        <member name="M:Keyczar.AttachedVerifier.VerifiedMessage(System.Byte[],System.Byte[])">
            <summary>
            Gets Verified message from signed message
            </summary>
            <param name="data">The data.</param>
            <param name="hidden">Optional hidden data used to generate the digest signature.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidCryptoDataException">Data Doesn't Match Signature!</exception>
        </member>
        <member name="M:Keyczar.AttachedVerifier.VerifiedMessage(System.IO.Stream,System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Gets Verified message from signed message
            </summary>
            <param name="input">The input.</param>
            <param name="verifiedMessage">The output message.</param>
            <param name="hidden">The hidden.</param>
            <param name="inputLength">Length of the input.</param>
            <exception cref="T:Keyczar.InvalidCryptoDataException">Data Doesn't Match Signature!</exception>
        </member>
        <member name="M:Keyczar.AttachedVerifier.TryGetVerifiedMessage(Keyczar.WebBase64,System.String@,System.Byte[])">
            <summary>
            Tries to get the verified message.
            </summary>
            <param name="signedMessage">The signed message.</param>
            <param name="verifiedMessage">The verified message.</param>
            <param name="hidden">The hidden.</param>
            <returns>false if signature is not correct</returns>
        </member>
        <member name="M:Keyczar.AttachedVerifier.TryGetVerifiedMessage(System.Byte[],System.Byte[]@,System.Byte[])">
            <summary>
            Tries to get the verified message.
            </summary>
            <param name="signedMessage">The signed message.</param>
            <param name="verifiedMessage">The verified message.</param>
            <param name="hidden">The hidden.</param>
            <returns>false if signature is not correct</returns>
        </member>
        <member name="M:Keyczar.AttachedVerifier.TryGetVerifiedMessage(System.IO.Stream,System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Tries to get the verified message.
            </summary>
            <param name="input">The input.</param>
            <param name="verifiedMessage">The verified message.</param>
            <param name="hiddden">The hiddden.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns>
            false if signature is not correct
            </returns>
        </member>
        <member name="T:Keyczar.AttachedVerifier.HelperAttachedVerify">
            <summary>
            Does the attache verify work.
            </summary>
        </member>
        <member name="M:Keyczar.AttachedVerifier.HelperAttachedVerify.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.AttachedVerifier.HelperAttachedVerify"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.AttachedVerifier.HelperAttachedVerify.VerifyHidden(System.IO.Stream,System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Verifies the specified signed message.
            </summary>
            <param name="input">The signed message.</param>
            <param name="verifiedMessage">The verified message.</param>
            <param name="hidden">The hidden data used to generate the digest signature.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <returns></returns>
            <exception cref="T:Keyczar.InvalidCryptoDataException">Data doesn't appear to have signatures attached!</exception>
        </member>
        <member name="M:Keyczar.AttachedVerifier.HelperAttachedVerify.PostfixDataVerify(Keyczar.Crypto.Streams.VerifyingStream,System.Object)">
            <summary>
            Postfixes data before verifying.
            </summary>
            <param name="verifyingStream">The verifying stream.</param>
            <param name="extra">The extra data passed by postFixData</param>
        </member>
        <member name="M:Keyczar.AttachedSigner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.AttachedSigner"/> class.
            </summary>
            <param name="keySetLocation">The key set location.</param>
        </member>
        <member name="M:Keyczar.AttachedSigner.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.AttachedSigner"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.AttachedSigner.Sign(System.String,System.Byte[])">
            <summary>
            Signs the specified raw data.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="hidden">The hidden data used to generate the digest signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.AttachedSigner.Sign(System.Byte[],System.Byte[])">
            <summary>
            Signs the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="hidden">The hidden data used to generate the digest signature.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.AttachedSigner.Sign(System.IO.Stream,System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Signs the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="signedData">The stream to write the data with attached signature.</param>
            <param name="hidden">The hidden data that can be used to generate the signature.</param>
            <param name="inputLength">(optional) Length of the input.</param>
        </member>
        <member name="T:Keyczar.AttachedSigner.AttachedSignerHelper">
            <summary>
            Helper subclass to sign correctly
            </summary>
        </member>
        <member name="M:Keyczar.AttachedSigner.AttachedSignerHelper.#ctor(Keyczar.IKeySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.AttachedSigner.AttachedSignerHelper"/> class.
            </summary>
            <param name="keySet">The key set.</param>
        </member>
        <member name="M:Keyczar.AttachedSigner.AttachedSignerHelper.Sign(System.IO.Stream,System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="input">The input.</param>
            <param name="signedData">The signed data.</param>
            <param name="hidden">The hidden data used to generate the digest signature.</param>
            <param name="inputLength">(optional) Length of the input.</param>
            <exception cref="T:System.ArgumentException">Stream must be able to seek.;data</exception>
            <exception cref="T:System.ArgumentException">Stream must be able to seek.;data</exception>
        </member>
        <member name="M:Keyczar.AttachedSigner.AttachedSignerHelper.PostfixDataSign(Keyczar.Crypto.Streams.HashingStream,System.Object)">
            <summary>
            Postfixes the data then signs it.
            </summary>
            <param name="signingStream">The signing stream.</param>
            <param name="extra">The extra data passed by postfixData.</param>
        </member>
        <member name="M:Keyczar.AttachedSigner.AttachedSignerHelper.PadSignature(System.Byte[],System.IO.Stream,System.Object)">
            <summary>
            Pads the signature with extra data.
            </summary>
            <param name="signature">The signature.</param>
            <param name="outputStream">The padded signature.</param>
            <param name="extra">The extra data passed by sigData.</param>
        </member>
        <member name="T:Keyczar.Util.WriteDecompressGzipStream">
            <summary>
            Decompress a giz
            </summary>
        </member>
        <member name="M:Keyczar.Util.WriteDecompressGzipStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.WriteDecompressGzipStream"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Keyczar.Util.WriteDecompressGzipStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:Keyczar.Util.WriteDecompressGzipStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Keyczar.Util.WriteDecompressGzipStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Keyczar.Util.WriteDecompressGzipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Keyczar.Util.WriteDecompressGzipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Keyczar.Util.WriteDecompressGzipStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Keyczar.Util.WriteDecompressGzipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:Keyczar.Util.WriteDecompressGzipStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Util.WriteDecompressGzipStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Util.WriteDecompressGzipStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Keyczar.Util.WriteDecompressGzipStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:Keyczar.Util.WriteDecompressGzipStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="T:Keyczar.WebBase64">
            <summary>
            WebBased64 forced type of string
            </summary> 
        </member>
        <member name="M:Keyczar.WebBase64.op_Implicit(Keyczar.WebBase64)~System.String">
            <summary>
            Strings the specified bytes.
            </summary>
            <param name="rawValue">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.WebBase64.op_Explicit(System.String)~Keyczar.WebBase64">
            <summary>
            Webs the base64.
            </summary>
            <param name="encodedValue">The web base64.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.WebBase64.FromBytes(System.Byte[])">
            <summary>
            Froms the bytes.
            </summary>
            <param name="rawValue">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.WebBase64.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.WebBase64"/> class.
            </summary>
            <param name="rawValue">The bytes.</param>
        </member>
        <member name="M:Keyczar.WebBase64.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.WebBase64"/> class.
            </summary>
            <param name="encodedValue">The web base64 encoded Value.</param>
        </member>
        <member name="M:Keyczar.WebBase64.ToBytes">
            <summary>
            To the bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Keyczar.WebBase64.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Keyczar.WebBase64.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Util.BigIntegerWebSafeBase64ByteConverter">
            <summary>
            Encodes byte arrays to websafe base64 in json and vice versa
            </summary>
        </member>
        <member name="T:Keyczar.Util.WebSafeBase64ByteConverter">
            <summary>
            Encodes byte arrays to websafe base64 in json and vice versa
            </summary>
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64ByteConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64ByteConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64ByteConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Keyczar.Util.BigIntegerWebSafeBase64ByteConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Keyczar.Util.BigIntegerWebSafeBase64ByteConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Keyczar.Util.BigIntegerWebSafeBase64ByteConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Keyczar.Util.WebSafeBase64">
            <summary>
            Encodes bytes into websafe base 64
            </summary>
        </member>
        <member name="F:Keyczar.Util.WebSafeBase64.DECODE">
            Mapping table from Base64 characters to 6-bit nibbles.
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64.Encode(System.Byte[])">
            <summary>
            Encodes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64.Decode(System.Char[])">
            <summary>
            Decodes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Keyczar.Util.WebSafeBase64.Base64DecodingException">
            <summary>
            Decoding exception
            </summary>
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64.Base64DecodingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.WebSafeBase64.Base64DecodingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64.Base64DecodingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.WebSafeBase64.Base64DecodingException"/> class.
            </summary>
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64.Base64DecodingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.WebSafeBase64.Base64DecodingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Keyczar.Util.WebSafeBase64.Base64DecodingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Keyczar.Util.WebSafeBase64.Base64DecodingException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Keyczar.Util.WebBase64JsonConverter">
            <summary>
            Converts json string to the strong typed WebBase64 and viceversa
            </summary>
        </member>
        <member name="M:Keyczar.Util.WebBase64JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Keyczar.Util.WebBase64JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Keyczar.Util.WebBase64JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
